{
	"tailwindThemeConfig": "/* Modern Tailwind v4 Theme Configuration - Based on Tipex Design System */\n@import \"tailwindcss\";\n\n@theme {\n  /* Override Tipex Design System Colors */\n  --color-tipex-*: initial;\n  \n  /* Tipex Grayscale Colors (50-950) - Override defaults */\n  --color-tipex-50: oklch(0.99 0 0);\n  --color-tipex-100: oklch(0.975 0 0);\n  --color-tipex-200: oklch(0.93 0 0);\n  --color-tipex-300: oklch(0.88 0 0);\n  --color-tipex-400: oklch(0.72 0 0);\n  --color-tipex-500: oklch(0.57 0 0);\n  --color-tipex-600: oklch(0.45 0 0);\n  --color-tipex-700: oklch(0.38 0 0);\n  --color-tipex-800: oklch(0.28 0 0);\n  --color-tipex-900: oklch(0.22 0 0);\n  --color-tipex-950: oklch(0.15 0 0);\n  \n  /* Tipex Success Colors (Green) - Override defaults */\n  --color-tipex-success-50: oklch(0.985 0.008 140);\n  --color-tipex-success-100: oklch(0.972 0.015 140);\n  --color-tipex-success-200: oklch(0.93 0.045 140);\n  --color-tipex-success-300: oklch(0.875 0.09 140);\n  --color-tipex-success-400: oklch(0.775 0.16 140);\n  --color-tipex-success-500: oklch(0.65 0.21 140);\n  --color-tipex-success-600: oklch(0.55 0.21 140);\n  --color-tipex-success-700: oklch(0.47 0.185 140);\n  --color-tipex-success-800: oklch(0.39 0.15 140);\n  --color-tipex-success-900: oklch(0.33 0.12 140);\n  --color-tipex-success-950: oklch(0.21 0.08 140);\n  \n  /* Tipex Primary Colors (Indigo) - Override defaults */\n  --color-tipex-primary-50: oklch(0.985 0.004 270);\n  --color-tipex-primary-100: oklch(0.972 0.008 270);\n  --color-tipex-primary-200: oklch(0.93 0.022 270);\n  --color-tipex-primary-300: oklch(0.875 0.045 270);\n  --color-tipex-primary-400: oklch(0.775 0.08 270);\n  --color-tipex-primary-500: oklch(0.65 0.1 270);\n  --color-tipex-primary-600: oklch(0.55 0.1 270);\n  --color-tipex-primary-700: oklch(0.47 0.085 270);\n  --color-tipex-primary-800: oklch(0.39 0.07 270);\n  --color-tipex-primary-900: oklch(0.33 0.058 270);\n  --color-tipex-primary-950: oklch(0.21 0.045 270);\n  \n  /* Spacing Scale - Override defaults */\n  --spacing-tipex-xs: 0.25rem;\n  --spacing-tipex-sm: 0.5rem;\n  --spacing-tipex-md: 1rem;\n  --spacing-tipex-lg: 1.5rem;\n  --spacing-tipex-xl: 2rem;\n  --spacing-tipex-2xl: 2.5rem;\n  \n  /* Sizing Scale - Override defaults */\n  --size-tipex-1: 0.25rem;\n  --size-tipex-2: 0.5rem;\n  --size-tipex-3: 0.75rem;\n  --size-tipex-4: 1rem;\n  --size-tipex-5: 1.25rem;\n  --size-tipex-6: 1.5rem;\n  --size-tipex-7: 1.75rem;\n  --size-tipex-8: 2rem;\n  --size-tipex-9: 2.25rem;\n  --size-tipex-10: 2.5rem;\n  --size-tipex-11: 2.75rem;\n  --size-tipex-12: 3rem;\n  \n  /* Border Radius - Override defaults */\n  --radius-tipex-sm: 0.25rem;\n  --radius-tipex-md: 0.375rem;\n  \n  /* Typography Scale - Override defaults */\n  --text-tipex-xs: 0.75rem;\n  --text-tipex-sm: 0.875rem;\n  --text-tipex-base: 1rem;\n  --text-tipex-lg: 1.125rem;\n  --text-tipex-xl: 1.25rem;\n  --text-tipex-2xl: 1.5rem;\n  \n  /* Z-Index - Override defaults */\n  --z-tipex-floating: 50;\n  --z-tipex-controls: 10;\n  \n  /* Custom additions (not in default theme) */\n  --shadow-tipex-sm: 0 1px 2px 0 rgb(0 0 0 / 0.05);\n  --shadow-tipex-md: 0 4px 6px -1px rgb(0 0 0 / 0.1);\n  --shadow-tipex-focus: 0 0 0 3px rgb(139 92 246 / 0.5);\n}\n\n/* Custom Dark Mode Variant (Tailwind v4) */\n@custom-variant dark (&:where(.dark, .dark *));\n\n/* Component Layer Customization */\n@layer components {\n  .tipex-editor {\n    @apply bg-tipex-50 dark:bg-tipex-950\n           border border-tipex-200 dark:border-tipex-800\n           rounded-radius-tipex-md;\n  }\n  \n  .tipex-editor.focused.focal {\n    @apply shadow-tipex-focus\n           border-tipex-primary-500 dark:border-tipex-primary-400\n           outline-none;\n  }\n  \n  .tipex-controls {\n    @apply bg-tipex-100 dark:bg-tipex-900\n           border border-tipex-200 dark:border-tipex-800\n           rounded-radius-tipex-sm;\n  }\n}",

	"customUtilities": "<Tipex body={body}>\n  {#snippet controlComponent(tipex)}\n    <Controls {tipex}>\n      <!-- Built-in utilities: copy HTML and link editing with clipboard integration -->\n      <!-- Add your custom utilities here -->\n      <button \n        class=\"tipex-edit-button tipex-button-rigid\"\n        onclick={() => exportToPDF(tipex.getHTML())}\n        aria-label=\"Export to PDF\"\n      >\n        <ICONHERE />\n      </button>\n      \n      <button \n        class=\"tipex-edit-button tipex-button-rigid\"\n        onclick={() => insertTemplate(tipex)}\n        aria-label=\"Insert template\"\n      >\n        <ICONHERE />\n      </button>\n      \n      <button \n        class=\"tipex-edit-button tipex-button-rigid\"\n        onclick={() => toggleFullscreen()}\n        aria-label=\"Toggle fullscreen\"\n      >\n        <ICONHERE />\n      </button>\n    </Controls>\n  {/snippet}\n</Tipex>",

	"customToolbar": "<script>\n  import CustomToolbar from './CustomToolbar.svelte';\n</script>\n\n<Tipex body={body}>\n  {#snippet controlComponent(tipex)}\n    <CustomToolbar {tipex} />\n  {/snippet}\n</Tipex>\n\n<!-- CustomToolbar.svelte -->\n<script>\n  export let tipex;\n  \n  let isActive = $derived((name, attrs = {}) => tipex?.isActive(name, attrs) ?? false);\n  let canExecute = $derived((command) => tipex?.can()[command]() ?? false);\n</script>\n\n<div class=\"custom-toolbar\">\n  <div class=\"toolbar-section\">\n    <button \n      class=\"toolbar-btn\"\n      class:active={isActive('bold')}\n      disabled={!canExecute('toggleBold')}\n      onclick={() => tipex.chain().focus().toggleBold().run()}\n    >\n      <strong>B</strong>\n    </button>\n    \n    <button \n      class=\"toolbar-btn\"\n      class:active={isActive('italic')}\n      onclick={() => tipex.chain().focus().toggleItalic().run()}\n    >\n      <em>I</em>\n    </button>\n  </div>\n  \n  <div class=\"toolbar-section\">\n    <select \n      value={isActive('heading', {level: 1}) ? '1' : \n             isActive('heading', {level: 2}) ? '2' : 'p'}\n      onchange={(e) => {\n        const level = e.target.value;\n        if (level === 'p') {\n          tipex.chain().focus().setParagraph().run();\n        } else {\n          tipex.chain().focus().toggleHeading({level: parseInt(level)}).run();\n        }\n      }}\n    >\n      <option value=\"p\">Paragraph</option>\n      <option value=\"1\">Heading 1</option>\n      <option value=\"2\">Heading 2</option>\n    </select>\n  </div>\n</div>\n\n<style>\n\t@reference \"../app.css\";\n    .custom-toolbar {\n      @apply flex gap-tipex-md p-tipex-lg\n\t  bg-tipex-control-bg dark:bg-tipex-control-bg-dark\n      rounded-tipex-md shadow-tipex-sm\n      border border-tipex-control-border dark:border-tipex-control-border-dark;\n    }\n</style>",

	"layoutCustomization": "<script>\n  import { Tipex } from \"@friendofsvelte/tipex\";\n  import DocumentStats from \"./DocumentStats.svelte\";\n  import CustomControl from \"./CustomControl.svelte\";\n  import SaveIndicator from \"./SaveIndicator.svelte\";\n  \n  let editor = $state();\n  let lastSaved = $state(null);\n  \n  // Auto-save functionality using runes\n  $effect(() => {\n    if (editor) {\n      const debounce = setTimeout(() => {\n        saveDocument(editor.getHTML());\n        lastSaved = new Date();\n      }, 1000);\n      \n      return () => clearTimeout(debounce);\n    }\n  });\n</script>\n\n<Tipex bind:tipex={editor} body={body}>\n  {#snippet head(tipex)}\n    <div class=\"editor-header\">\n      <DocumentStats {tipex} />\n      <SaveIndicator {lastSaved} />\n    </div>\n  {/snippet}\n  \n  {#snippet controlComponent(tipex)}\n    <CustomControl {tipex} />\n  {/snippet}\n  \n  {#snippet foot(tipex)}\n    <div class=\"editor-footer\">\n      <span class=\"status\">Ready</span>\n      <span class=\"word-count\">{getWordCount(tipex)} words</span>\n    </div>\n  {/snippet}\n</Tipex>",

	"imageUploadCustomization": "<script>\n  import { Tipex, Controls, Utility } from \"@friendofsvelte/tipex\";\n  \n  async function handleImageUpload(file) {\n    // Custom validation\n    const maxSize = 5 * 1024 * 1024; // 5MB\n    const allowedTypes = ['image/jpeg', 'image/png', 'image/webp'];\n    \n    if (!allowedTypes.includes(file.type)) {\n      throw new Error('Unsupported file type');\n    }\n    \n    if (file.size > maxSize) {\n      throw new Error('File too large');\n    }\n    \n    // Upload to your service (Cloudinary, AWS S3, etc.)\n    const formData = new FormData();\n    formData.append('image', file);\n    \n    const response = await fetch('/api/upload', {\n      method: 'POST',\n      body: formData\n    });\n    \n    if (!response.ok) throw new Error('Upload failed');\n    \n    const { url, publicId } = await response.json();\n    \n    return {\n      src: url,\n      alt: file.name,\n      'data-public-id': publicId // For later deletion\n    };\n  }\n  \n  let editor;\n</script>\n\n<Tipex bind:tipex={editor} body={body}>\n  {#snippet controlComponent(tipex)}\n    <Controls {tipex}>\n      <div class=\"tipex-utilities\">\n        <Utility {tipex} />\n        <button \n          class=\"tipex-edit-button tipex-button-rigid\"\n          onclick={() => {\n            const input = document.createElement('input');\n            input.type = 'file';\n            input.accept = 'image/*';\n            input.onchange = async (e) => {\n              const file = e.target.files[0];\n              if (file) {\n                try {\n                  const imageData = await handleImageUpload(file);\n                  tipex.commands.setImage(imageData);\n                } catch (error) {\n                  alert('Upload failed: ' + error.message);\n                }\n              }\n            };\n            input.click();\n          }}\n          aria-label=\"Upload image\"\n        >\n          <ICONHERE />\n        </button>\n      </div>\n    </Controls>\n  {/snippet}\n</Tipex>",

	"customExtensions": "<script>\n  import { Extension } from '@tiptap/core';\n  import { defaultExtensions, Tipex } from \"@friendofsvelte/tipex\";\n  \n  // Custom extension for highlighting text\n  const Highlight = Extension.create({\n    name: 'highlight',\n    \n    addOptions() {\n      return {\n        multicolor: true,\n        HTMLAttributes: {},\n      };\n    },\n    \n    addGlobalAttributes() {\n      return [\n        {\n          types: ['textStyle'],\n          attributes: {\n            backgroundColor: {\n              default: null,\n              parseHTML: element => element.style.backgroundColor,\n              renderHTML: attributes => {\n                if (!attributes.backgroundColor) return {};\n                return { style: `background-color: ${attributes.backgroundColor}` };\n              },\n            },\n          },\n        },\n      ];\n    },\n    \n    addCommands() {\n      return {\n        setHighlight: (attributes) => ({ commands }) => {\n          return commands.setMark('textStyle', attributes);\n        },\n        toggleHighlight: (attributes) => ({ commands }) => {\n          return commands.toggleMark('textStyle', attributes);\n        },\n        unsetHighlight: () => ({ commands }) => {\n          return commands.unsetMark('textStyle');\n        },\n      };\n    },\n  });\n  \n  // Custom extension for word count\n  const WordCount = Extension.create({\n    name: 'wordCount',\n    \n    addStorage() {\n      return {\n        wordCount: 0,\n        characterCount: 0,\n      };\n    },\n    \n    onUpdate() {\n      const text = this.editor.getText();\n      this.storage.wordCount = text.split(/\\\\s+/).filter(word => word.length > 0).length;\n      this.storage.characterCount = text.length;\n    },\n  });\n  \n  const customExtensions = [\n    ...defaultExtensions,\n    Highlight,\n    WordCount,\n    // Add more custom extensions\n  ];\n</script>\n\n<Tipex extensions={customExtensions} body={body}>\n  {#snippet controlComponent(tipex)}\n    <div class=\"custom-controls\">\n      <!-- Highlight controls -->\n      <button \n        onclick={() => tipex.commands.setHighlight({ backgroundColor: '#ffeb3b' })}\n        class=\"tipex-edit-button\"\n      >\n        <ICONHERE />\n      </button>\n      \n      <!-- Word count display -->\n      <span class=\"word-count\">\n        Words: {tipex.storage.wordCount?.wordCount || 0}\n      </span>\n    </div>\n  {/snippet}\n</Tipex>",

	"eventDrivenCustomization": "<script>\n  import { Tipex } from \"@friendofsvelte/tipex\";\n  \n  let editor = $state();\n  let isTyping = $state(false);\n  let typingTimer;\n  \n  function handleEditorReady(tipex) {\n    // Auto-save setup\n    tipex.on('update', ({ editor }) => {\n      clearTimeout(typingTimer);\n      isTyping = true;\n      \n      typingTimer = setTimeout(() => {\n        isTyping = false;\n        saveContent(editor.getHTML());\n      }, 1000);\n    });\n    \n    // Custom keyboard shortcuts\n    tipex.on('keydown', (event) => {\n      // Ctrl+S for save\n      if (event.ctrlKey && event.key === 's') {\n        event.preventDefault();\n        saveContent(tipex.getHTML());\n      }\n      \n      // Ctrl+Shift+L for link\n      if (event.ctrlKey && event.shiftKey && event.key === 'L') {\n        event.preventDefault();\n        const url = prompt('Enter URL:');\n        if (url) {\n          tipex.commands.setLink({ href: url });\n        }\n      }\n    });\n    \n    // Selection change handling\n    tipex.on('selectionUpdate', ({ editor }) => {\n      updateFloatingMenu(editor);\n    });\n    \n    // Focus/blur handling\n    tipex.on('focus', () => {\n      document.body.classList.add('editor-focused');\n    });\n    \n    tipex.on('blur', () => {\n      document.body.classList.remove('editor-focused');\n    });\n  }\n  \n  async function saveContent(html) {\n    try {\n      await fetch('/api/save', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ content: html })\n      });\n    } catch (error) {\n      console.error('Save failed:', error);\n    }\n  }\n</script>\n\n<Tipex \n  bind:tipex={editor}\n  body={body}\n  onready={handleEditorReady}\n>\n  {#snippet head()}\n    <div class=\"editor-status\">\n      {#if isTyping}\n        <span class=\"status typing\">Typing...</span>\n      {:else}\n        <span class=\"status saved\">Saved</span>\n      {/if}\n    </div>\n  {/snippet}\n</Tipex>",

	"accessibilityCustomization": "<script>\n  function enhanceAccessibility(tipex) {\n    // Add custom ARIA labels\n    const editorElement = tipex.view.dom;\n    editorElement.setAttribute('aria-label', 'Rich text editor');\n    editorElement.setAttribute('role', 'textbox');\n    editorElement.setAttribute('aria-multiline', 'true');\n    \n    // Custom keyboard shortcuts for accessibility\n    tipex.on('keydown', (event) => {\n      // Alt+1-6 for headings\n      if (event.altKey && event.key >= '1' && event.key <= '6') {\n        event.preventDefault();\n        const level = parseInt(event.key);\n        tipex.commands.toggleHeading({ level });\n        \n        // Announce to screen readers\n        announceToScreenReader(`Heading level ${level} applied`);\n      }\n      \n      // Alt+L for list\n      if (event.altKey && event.key === 'l') {\n        event.preventDefault();\n        tipex.commands.toggleBulletList();\n        announceToScreenReader('Bullet list toggled');\n      }\n    });\n  }\n  \n  function announceToScreenReader(message) {\n    const announcement = document.createElement('div');\n    announcement.setAttribute('aria-live', 'polite');\n    announcement.setAttribute('aria-atomic', 'true');\n    announcement.className = 'sr-only';\n    announcement.textContent = message;\n    \n    document.body.appendChild(announcement);\n    setTimeout(() => document.body.removeChild(announcement), 1000);\n  }\n</script>\n\n<Tipex \n  body={body}\n  onready={enhanceAccessibility}\n  aria-label=\"Document editor\"\n>\n  {#snippet controlComponent(tipex)}\n    <div class=\"accessible-controls\" role=\"toolbar\" aria-label=\"Formatting options\">\n      <button \n        class=\"tipex-edit-button\"\n        class:active={tipex.isActive('bold')}\n        onclick={() => tipex.commands.toggleBold()}\n        aria-label=\"Toggle bold formatting\"\n        aria-pressed={tipex.isActive('bold')}\n      >\n        <strong>B</strong>\n      </button>\n      \n      <button \n        class=\"tipex-edit-button\"\n        class:active={tipex.isActive('italic')}\n        onclick={() => tipex.commands.toggleItalic()}\n        aria-label=\"Toggle italic formatting\"\n        aria-pressed={tipex.isActive('italic')}\n      >\n        <em>I</em>\n      </button>\n    </div>\n  {/snippet}\n</Tipex>\n\n<style>\n  .sr-only {\n    position: absolute;\n    width: 1px;\n    height: 1px;\n    padding: 0;\n    margin: -1px;\n    overflow: hidden;\n    clip: rect(0, 0, 0, 0);\n    white-space: nowrap;\n    border: 0;\n  }\n</style>"
}
