{
	"customizeControlImplementation": "<Tipex body={body}\n   controlComponent={CustomControl}\n   />",

	"addHeadFootComponent": "<script lang=\"ts\">\n  import { Tipex } from \"@friendofsvelte/tipex\";\n  import type { Editor } from '@tiptap/core';\n  import DocumentHeader from \"./DocumentHeader.svelte\";\n  import DocumentFooter from \"./DocumentFooter.svelte\";\n  import CustomToolbar from \"./CustomToolbar.svelte\";\n  \n  let editor = $state<Editor>();\n  let wordCount = $state(0);\n  let lastSaved = $state<Date | null>(null);\n  \n  // Reactive word count using runes\n  $effect(() => {\n    if (editor) {\n      const text = editor.getText();\n      wordCount = text.split(/\\s+/).filter(word => word.length > 0).length;\n    }\n  });\n  \n  // Auto-save functionality using runes\n  $effect(() => {\n    if (editor) {\n      const debounceTimer = setTimeout(() => {\n        saveDocument(editor.getHTML());\n        lastSaved = new Date();\n      }, 2000);\n      \n      return () => clearTimeout(debounceTimer);\n    }\n  });\n  \n  async function saveDocument(content: string) {\n    try {\n      await fetch('/api/documents/save', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ content, timestamp: new Date().toISOString() })\n      });\n    } catch (error) {\n      console.error('Auto-save failed:', error);\n    }\n  }\n</script>\n\n<Tipex bind:tipex={editor} body={body}>\n  {#snippet head(tipex)}\n    <DocumentHeader \n      {wordCount} \n      {lastSaved}\n      characterCount={tipex.getText().length}\n      readingTime={Math.ceil(wordCount / 200)}\n    />\n  {/snippet}\n  \n  {#snippet controlComponent(tipex)}\n    <CustomToolbar \n      {tipex} \n      onSave={() => saveDocument(tipex.getHTML())}\n      onExport={() => exportDocument(tipex.getHTML())}\n    />\n  {/snippet}\n  \n  {#snippet foot(tipex)}\n    <DocumentFooter \n      status={lastSaved ? 'saved' : 'unsaved'}\n      {wordCount}\n      version=\"1.2.3\"\n    />\n  {/snippet}\n</Tipex>",

	"tweakingExtensions": "<script lang=\"ts\">\n  import { defaultExtensions, Tipex } from \"@friendofsvelte/tipex\";\n  import { Heading } from '@tiptap/extension-heading';\n  import { TextAlign } from '@tiptap/extension-text-align';\n  import { Highlight } from '@tiptap/extension-highlight';\n  import { Underline } from '@tiptap/extension-underline';\n  import { Table } from '@tiptap/extension-table';\n  import { TableRow } from '@tiptap/extension-table-row';\n  import { TableHeader } from '@tiptap/extension-table-header';\n  import { TableCell } from '@tiptap/extension-table-cell';\n  import type { Extensions } from '@tiptap/core';\n  \n  // Custom extension configuration\n  const customExtensions: Extensions = [\n    ...defaultExtensions.filter(ext => ext.name !== 'heading'), // Remove default heading\n    \n    // Custom heading configuration\n    Heading.configure({\n      levels: [1, 2, 3, 4], // Only allow H1-H4\n      HTMLAttributes: {\n        class: 'custom-heading',\n      },\n    }),\n    \n    // Text alignment support\n    TextAlign.configure({\n      types: ['heading', 'paragraph'],\n      alignments: ['left', 'center', 'right', 'justify'],\n      defaultAlignment: 'left',\n    }),\n    \n    // Highlighting with multiple colors\n    Highlight.configure({\n      multicolor: true,\n      HTMLAttributes: {\n        class: 'custom-highlight',\n      },\n    }),\n    \n    // Underline support\n    Underline.configure({\n      HTMLAttributes: {\n        class: 'custom-underline',\n      },\n    }),\n    \n    // Table support\n    Table.configure({\n      resizable: true,\n      HTMLAttributes: {\n        class: 'custom-table',\n      },\n    }),\n    TableRow,\n    TableHeader,\n    TableCell,\n  ];\n  \n  let body = `\n    <h1>Welcome to Enhanced Tipex</h1>\n    <p>This editor now supports:</p>\n    <ul>\n      <li>Custom heading levels (H1-H4 only)</li>\n      <li>Text alignment options</li>\n      <li><mark data-color=\"#ffeb3b\">Multi-color highlighting</mark></li>\n      <li><u>Underlined text</u></li>\n      <li>Resizable tables</li>\n    </ul>\n  `;\n</script>\n\n<Tipex extensions={customExtensions} {body} />",

	"advancedCustomExtension": "<script lang=\"ts\">\n  import { Extension, Node } from '@tiptap/core';\n  import { Plugin, PluginKey } from 'prosemirror-state';\n  import { defaultExtensions, Tipex } from \"@friendofsvelte/tipex\";\n  \n  // Custom extension for word count with live updates\n  const WordCountExtension = Extension.create({\n    name: 'wordCount',\n    \n    addStorage() {\n      return {\n        words: 0,\n        characters: 0,\n        charactersWithSpaces: 0,\n        sentences: 0,\n        paragraphs: 0,\n      };\n    },\n    \n    addProseMirrorPlugins() {\n      return [\n        new Plugin({\n          key: new PluginKey('wordCount'),\n          appendTransaction: (transactions, oldState, newState) => {\n            const docChanged = transactions.some(transaction => transaction.docChanged);\n            if (!docChanged) return;\n            \n            const text = newState.doc.textContent;\n            const words = text.match(/\\S+/g) || [];\n            const sentences = text.split(/[.!?]+/).filter(s => s.trim().length > 0);\n            const paragraphs = text.split(/\\n\\s*\\n/).filter(p => p.trim().length > 0);\n            \n            this.storage.words = words.length;\n            this.storage.characters = text.replace(/\\s/g, '').length;\n            this.storage.charactersWithSpaces = text.length;\n            this.storage.sentences = sentences.length;\n            this.storage.paragraphs = paragraphs.length;\n            \n            // Dispatch custom event\n            this.editor.emit('wordCountUpdate', this.storage);\n          },\n        }),\n      ];\n    },\n  });\n  \n  // Custom callout/admonition extension\n  const CalloutExtension = Node.create({\n    name: 'callout',\n    group: 'block',\n    content: 'block+',\n    \n    addAttributes() {\n      return {\n        type: {\n          default: 'info',\n          parseHTML: element => element.getAttribute('data-type'),\n          renderHTML: attributes => ({ 'data-type': attributes.type }),\n        },\n        title: {\n          default: null,\n          parseHTML: element => element.getAttribute('data-title'),\n          renderHTML: attributes => ({ 'data-title': attributes.title }),\n        },\n      };\n    },\n    \n    parseHTML() {\n      return [{ tag: 'div[data-callout]' }];\n    },\n    \n    renderHTML({ HTMLAttributes }) {\n      return ['div', { ...HTMLAttributes, 'data-callout': '' }, 0];\n    },\n    \n    addCommands() {\n      return {\n        setCallout: (attributes) => ({ commands }) => {\n          return commands.wrapIn(this.name, attributes);\n        },\n        toggleCallout: (attributes) => ({ commands }) => {\n          return commands.toggleWrap(this.name, attributes);\n        },\n      };\n    },\n  });\n  \n  // Emoji picker extension\n  const EmojiExtension = Extension.create({\n    name: 'emoji',\n    \n    addCommands() {\n      return {\n        insertEmoji: (emoji: string) => ({ commands }) => {\n          return commands.insertContent(emoji);\n        },\n      };\n    },\n    \n    addKeyboardShortcuts() {\n      return {\n        'Mod-Shift-e': () => {\n          // Trigger emoji picker\n          this.editor.emit('openEmojiPicker');\n          return true;\n        },\n      };\n    },\n  });\n  \n  const enhancedExtensions = [\n    ...defaultExtensions,\n    WordCountExtension,\n    CalloutExtension,\n    EmojiExtension,\n  ];\n  \n  let editor = $state();\n  let stats = $state({ words: 0, characters: 0, sentences: 0, paragraphs: 0 });\n  \n  function handleEditorReady(tipex) {\n    tipex.on('wordCountUpdate', (newStats) => {\n      stats = newStats;\n    });\n    \n    tipex.on('openEmojiPicker', () => {\n      // Open emoji picker modal/dropdown\n      showEmojiPicker(tipex);\n    });\n  }\n  \n  function showEmojiPicker(tipex) {\n    const emojis = ['😀', '😃', '😄', '😁', '😆', '😅', '😂', '🤣', '😊', '😇'];\n    const picker = document.createElement('div');\n    picker.className = 'emoji-picker';\n    picker.innerHTML = emojis.map(emoji => \n      `<button onclick=\"insertEmoji('${emoji}')\">${emoji}</button>`\n    ).join('');\n    \n    document.body.appendChild(picker);\n    \n    window.insertEmoji = (emoji) => {\n      tipex.commands.insertEmoji(emoji);\n      document.body.removeChild(picker);\n    };\n  }\n</script>\n\n<Tipex \n  extensions={enhancedExtensions} \n  bind:tipex={editor}\n  onready={handleEditorReady}\n  body={body}\n>\n  {#snippet head()}\n    <div class=\"editor-stats\">\n      <span>Words: {stats.words}</span>\n      <span>Characters: {stats.characters}</span>\n      <span>Sentences: {stats.sentences}</span>\n      <span>Paragraphs: {stats.paragraphs}</span>\n    </div>\n  {/snippet}\n  \n  {#snippet controlComponent(tipex)}\n    <div class=\"enhanced-controls\">\n      <!-- Callout buttons -->\n      <button onclick={() => tipex.commands.setCallout({ type: 'info', title: 'Info' })}>\n        Info Callout\n      </button>\n      <button onclick={() => tipex.commands.setCallout({ type: 'warning', title: 'Warning' })}>\n        Warning Callout\n      </button>\n      \n      <!-- Emoji button -->\n      <button onclick={() => tipex.emit('openEmojiPicker')}>\n        😀 Emoji\n      </button>\n    </div>\n  {/snippet}\n</Tipex>",

	"collaborativeExtension": "<script lang=\"ts\">\n  import { Extension } from '@tiptap/core';\n  import { Collaboration } from '@tiptap/extension-collaboration';\n  import { CollaborationCursor } from '@tiptap/extension-collaboration-cursor';\n  import * as Y from 'yjs';\n  import { WebsocketProvider } from 'y-websocket';\n  import { defaultExtensions, Tipex } from \"@friendofsvelte/tipex\";\n  \n  // Collaborative editing setup\n  const ydoc = new Y.Doc();\n  const provider = new WebsocketProvider('ws://localhost:1234', 'tipex-room', ydoc);\n  \n  const collaborativeExtensions = [\n    ...defaultExtensions,\n    \n    Collaboration.configure({\n      document: ydoc,\n    }),\n    \n    CollaborationCursor.configure({\n      provider: provider,\n      user: {\n        name: 'John Doe',\n        color: '#f783ac',\n      },\n    }),\n  ];\n  \n  let editor = $state();\n  let connectedUsers = $state([]);\n  \n  function handleEditorReady(tipex) {\n    provider.on('status', event => {\n      console.log('Connection status:', event.status);\n    });\n    \n    provider.awareness.on('change', () => {\n      connectedUsers = Array.from(provider.awareness.getStates().values());\n    });\n  }\n</script>\n\n<Tipex \n  extensions={collaborativeExtensions}\n  bind:tipex={editor}\n  onready={handleEditorReady}\n  body=\"\"\n>\n  {#snippet head()}\n    <div class=\"collaboration-info\">\n      <span>Connected users: {connectedUsers.length}</span>\n      <div class=\"user-avatars\">\n        {#each connectedUsers as user}\n          <div \n            class=\"user-avatar\" \n            style=\"background-color: {user.color}\"\n            title={user.name}\n          >\n            {user.name.charAt(0)}\n          </div>\n        {/each}\n      </div>\n    </div>\n  {/snippet}\n</Tipex>",

	"tailwindV4Theming": "/* Custom Tipex Theme with Tailwind v4 */\n@import \"tailwindcss\";\n\n@theme {\n  /* Custom Tipex Design System */\n  --color-tipex-*: initial;\n  \n  /* Brand Colors */\n  --color-tipex-primary: #8b5cf6; /* Purple brand */\n  --color-tipex-primary-dark: #a78bfa;\n  --color-tipex-secondary: #64748b;\n  --color-tipex-secondary-dark: #94a3b8;\n  \n  /* Custom Editor Theme */\n  --color-tipex-editor-bg: #fefefe;\n  --color-tipex-editor-bg-dark: #0c0a09;\n  --color-tipex-editor-border: #e2e8f0;\n  --color-tipex-editor-border-dark: #292524;\n  --color-tipex-editor-text: #0f172a;\n  --color-tipex-editor-text-dark: #fafaf9;\n  \n  /* Premium Control Colors */\n  --color-tipex-control-bg: #ffffff;\n  --color-tipex-control-bg-dark: #1c1917;\n  --color-tipex-control-hover: #f8fafc;\n  --color-tipex-control-hover-dark: #292524;\n  --color-tipex-control-active: #ede9fe;\n  --color-tipex-control-active-dark: #581c87;\n  --color-tipex-control-border: #cbd5e1;\n  --color-tipex-control-border-dark: #44403c;\n  \n  /* Enhanced Typography */\n  --text-tipex-xs: 0.8125rem;\n  --text-tipex-sm: 0.9375rem;\n  --text-tipex-base: 1.0625rem;\n  --text-tipex-lg: 1.1875rem;\n  --text-tipex-xl: 1.375rem;\n  --text-tipex-2xl: 1.625rem;\n  \n  /* Custom Spacing */\n  --spacing-tipex-xs: 0.375rem;\n  --spacing-tipex-sm: 0.625rem;\n  --spacing-tipex-md: 1.125rem;\n  --spacing-tipex-lg: 1.75rem;\n  --spacing-tipex-xl: 2.25rem;\n  \n  /* Modern Shadows */\n  --shadow-tipex-sm: 0 1px 3px 0 rgb(0 0 0 / 0.08);\n  --shadow-tipex-md: 0 4px 8px -2px rgb(0 0 0 / 0.12);\n  --shadow-tipex-lg: 0 8px 16px -4px rgb(0 0 0 / 0.16);\n  --shadow-tipex-focus: 0 0 0 3px rgb(139 92 246 / 0.4);\n  --shadow-tipex-focus-dark: 0 0 0 3px rgb(167 139 250 / 0.4);\n}\n\n/* Custom Dark Mode Variant */\n@custom-variant dark (&:where(.dark, .dark *));\n\n/* Premium Component Styling */\n@layer components {\n  .tipex-editor-premium {\n    @apply bg-gradient-to-br from-tipex-editor-bg via-white to-tipex-control-bg\n           dark:from-tipex-editor-bg-dark dark:via-stone-900 dark:to-tipex-control-bg-dark\n           border-2 border-tipex-editor-border dark:border-tipex-editor-border-dark\n           rounded-tipex-lg shadow-tipex-md;\n  }\n  \n  .tipex-editor-premium.focused.focal {\n    @apply shadow-tipex-focus dark:shadow-tipex-focus-dark\n           border-tipex-primary dark:border-tipex-primary-dark\n           outline-none ring-2 ring-tipex-primary/20 dark:ring-tipex-primary-dark/20;\n  }\n  \n  .tipex-control-premium {\n    @apply bg-tipex-control-bg/90 dark:bg-tipex-control-bg-dark/90\n           backdrop-blur-sm border border-tipex-control-border/50 dark:border-tipex-control-border-dark/50\n           rounded-tipex-md shadow-tipex-sm;\n  }\n  \n  .tipex-button-premium {\n    @apply px-tipex-md py-tipex-sm\n           bg-gradient-to-b from-tipex-control-bg to-tipex-control-hover\n           dark:from-tipex-control-bg-dark dark:to-tipex-control-hover-dark\n           border border-tipex-control-border dark:border-tipex-control-border-dark\n           rounded-tipex-sm shadow-tipex-sm\n           hover:shadow-tipex-md hover:scale-105\n           active:scale-95 active:shadow-tipex-sm\n           transition-all duration-150 ease-out\n           focus:outline-none focus:ring-2 focus:ring-tipex-primary/40;\n  }\n  \n  .tipex-button-premium.active {\n    @apply bg-gradient-to-b from-tipex-control-active to-tipex-primary/10\n           dark:from-tipex-control-active-dark dark:to-tipex-primary-dark/10\n           border-tipex-primary dark:border-tipex-primary-dark\n           text-tipex-primary dark:text-tipex-primary-dark\n           shadow-tipex-md ring-2 ring-tipex-primary/20 dark:ring-tipex-primary-dark/20;\n  }\n  \n  .tipex-scrollbar-premium {\n    scrollbar-width: thin;\n    scrollbar-color: rgb(139 92 246 / 0.3) transparent;\n  }\n  \n  .tipex-scrollbar-premium::-webkit-scrollbar {\n    width: 6px;\n  }\n  \n  .tipex-scrollbar-premium::-webkit-scrollbar-track {\n    background: transparent;\n  }\n  \n  .tipex-scrollbar-premium::-webkit-scrollbar-thumb {\n    background: linear-gradient(to bottom, rgb(139 92 246 / 0.3), rgb(139 92 246 / 0.5));\n    border-radius: 3px;\n  }\n  \n  .tipex-scrollbar-premium::-webkit-scrollbar-thumb:hover {\n    background: linear-gradient(to bottom, rgb(139 92 246 / 0.5), rgb(139 92 246 / 0.7));\n  }\n  \n  .dark .tipex-scrollbar-premium {\n    scrollbar-color: rgb(167 139 250 / 0.4) transparent;\n  }\n  \n  .dark .tipex-scrollbar-premium::-webkit-scrollbar-thumb {\n    background: linear-gradient(to bottom, rgb(167 139 250 / 0.3), rgb(167 139 250 / 0.5));\n  }\n  \n  .dark .tipex-scrollbar-premium::-webkit-scrollbar-thumb:hover {\n    background: linear-gradient(to bottom, rgb(167 139 250 / 0.5), rgb(167 139 250 / 0.7));\n  }\n}"
}
